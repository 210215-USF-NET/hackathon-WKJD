@{
    ViewData["Title"] = "Home Page";
}

<style>
    canvas {
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
        width: 500px;
        border: 2px solid black;
    }

    .colorBlocks {
        width: 25px;
        height: 25px;
        padding-left: 0;
        padding-right: 0;
        margin: 7px;
        float: left;
        position: relative;
    }

        .colorBlocks:hover {
            outline: 2px solid black;
            outline-offset: 2px;
        }

    #colorHolder {
        overflow: hidden;
        width: 500px;
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
    }

    .Eraser {
        text-align: justify;
        padding-left: 0;
        padding-right: 0;
        margin: 7px;
        float: left;
        position: relative;
    }

    Eraser:after {
        content: "";
        display: inline-block;
        width: 100%;
    }

    .Eraser:hover {
        background-color: lightgray;
        outline: 2px solid black;
        outline-offset: 2px;
    }
</style>

<div class="text-center">
    <img src="https://i.imgur.com/3hmNAo6.png" />
</div>

<body onload="init()">
    <div class="text-center">
        <canvas id="can" width="500" height="500"></canvas>
        <div>Choose Color</div>
        <div id="colorHolder" class="text-center">
            <div id="red" style="background: red;" class="colorBlocks" onclick="color(this)"></div>
            <div id="orange" style="background: orange;" class="colorBlocks" onclick="color(this)"></div>
            <div id="yellow" style="background: yellow;" class="colorBlocks" onclick="color(this)"></div>
            <div id="green" style="background: green;" class="colorBlocks" onclick="color(this)"></div>
            <div id="blue" style="background: blue;" class="colorBlocks" onclick="color(this)"></div>
            <div id="indigo" style="background: indigo;" class="colorBlocks" onclick="color(this)"></div>
            <div id="violet" style="background: violet;" class="colorBlocks" onclick="color(this)"></div>
            <div id="pink" style="background: pink;" class="colorBlocks" onclick="color(this)"></div>
            <div id="black" style="background: black;" class="colorBlocks" onclick="color(this)"></div>
            <div id="white" class="Eraser" onclick="color(this)">Eraser</div>
        </div>
        <img id="canvasimg" style="display:none;">
        <br />
        <input type="number" id="setSize" value="2" min="2" max="100"/>
        <input type="button" value="Save" id="btn" size="30" onclick="save()">
        <input type="button" value="Clear" id="clr" size="23" onclick="erase()">
        <input type="file" id="bgImg" accept="image/*" />
        <hr />
    </div>
    <div class="text-center">
        <form action="UploadImage">
            <div class="form-group">
                <input type="email" name="email" placeholder="example@something.com" />

            </div>
            <div class="form-group">
                <input type="hidden" name="image" id="imageToPass" value="" />

            </div>
            <div class="form-group">
                <input type="submit" value="Upload Image" />
            </div>
        </form>
    </div>
</body>



<script type="text/javascript">
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;
    var x = "black",
        y = 2;
    document.getElementById('black').style.outline = "2px solid black";
    document.getElementById('black').style.outlineOffset = "2px";
    
    var pixelSizeChanger = document.getElementById('setSize');

    pixelSizeChanger.addEventListener('change', function (e) {
        y = e.target.value;
    });

    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;
        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);
        //adding background image to current canvas
        /*
        var backgroundBG = new Image();
        backgroundBG.src = "https://i.imgur.com/fSgnUKW.jpg";
        backgroundBG.onload = function () {
            ctx.drawImage(backgroundBG, 0, 0, w, h)
        }
        */

        //loading references to our file input

        var fileInput = document.getElementById('bgImg');

        fileInput.addEventListener('change', function (e) {
            var ctxBG = document.getElementById('can').getContext('2d');
            var img = new Image;
            img.src = URL.createObjectURL(e.target.files[0]);

            img.onload = function () {
                //Check if the user has the eraser selected, then change the operation
                if (ctxBG.globalCompositeOperation == "destination-out") {
                    ctxBG.globalCompositeOperation = "source-over";
                    ctxBG.drawImage(img, 0, 0, w, h);
                    ctxBG.globalCompositeOperation = "destination-out";
                } else {
                    ctxBG.drawImage(img, 0, 0, w, h);
                }
                
                
            }
            reader.readAsDataURL(file);

        });
    }





    function color(obj) {
        var elements = document.querySelectorAll('.colorBlocks');
        for (var i = 0; i < elements.length; i++) {
            elements[i].style.outline = "0px";
            elements[i].style.outlineOffset = "0px";
        }
        obj.style.outline = "2px solid black";
        obj.style.outlineOffset = "2px";
        switch (obj.id) {
            case "white":
                x = 'rgba(0,0,0,1)';
                ctx.globalCompositeOperation = 'destination-out';
                break;
            case obj.id:
                ctx.globalCompositeOperation = "source-over";
                x = obj.id;
                break;
        }
    }

    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }

    function erase() {
        var m = confirm("Would you like to erase your image and start over?");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }

    function save() {
        //document.getElementById("canvasimg").style.border = "2px solid";
        var dataURL = canvas.toDataURL();
        document.getElementById("canvasimg").innerHTML = "Image has been saved! Please enter your email address and press 'upload' to receive a copy of your image";
        document.getElementById("canvasimg").style.display = "inline";
        /*by setting the value of our hidden form field to the data url, we can pass the data to the controller for the image */
        document.getElementById("imageToPass").value = dataURL;
    }


    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.getBoundingClientRect().left;
            currY = e.clientY - canvas.getBoundingClientRect().top;

            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.getBoundingClientRect().left;;
                currY = e.clientY - canvas.getBoundingClientRect().top;
                draw();
            }
        }
    }

    //stuff for background image canvas
    //this isn't working with the current styling of other canvas - just gonna use a background
    /*
    var canvasBG = document.getElementById("backgroundCanvas"),
        ctxBG = canvasBG.getContext("2d");
    var backgroundBG = new Image();
    backgroundBG.src = "https://i.imgur.com/fSgnUKW.jpg";

    backgroundBG.onload = function () {
        ctxBG.drawImage(backgroundBG, 0, 0);
    }
    */
</script>