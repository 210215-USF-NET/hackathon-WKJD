@{
    ViewData["Title"] = "Home Page";
}

<style>
    canvas {
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
        width: 500px;
        border: 2px solid black;
    }

    .colorBlocks {
        width: 25px;
        height: 25px;
        padding-left: 0;
        padding-right: 0;
        margin: 7px;
        float: left;
        position: relative;
    }

    .colorBlocks:hover{
        outline: 2px solid black;
        outline-offset: 2px;
    }

    #colorHolder {
        overflow: hidden;
        width: 300px;
        padding-left: 0;
        padding-right: 0;
        margin-left: auto;
        margin-right: auto;
        display: block;
    }

    .Eraser {
        outline: 2px solid black;
        outline-offset: 2px;
        text-align: justify;
        padding-left: 0;
        padding-right: 0;
        margin: 7px;
        float: left;
        position: relative;
    }
    Eraser:after {
        content: "";
        display: inline-block;
        width: 100%;
    }
    .Eraser:hover{
        background-color:lightgray;
    }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
</div>

<body onload="init()">
    <div class="text-center">
        <canvas id="can" width="500" height="500"></canvas>
        <div>Choose Color</div>
        <div id="colorHolder" class="text-center">
            <div id="green" style="background: green;" class="colorBlocks" onclick="color(this)"></div>
            <div id="blue" style="background: blue;" class="colorBlocks" onclick="color(this)"></div>
            <div id="red" style="background: red;" class="colorBlocks" onclick="color(this)"></div>
            <div id="yellow" style="background: yellow;" class="colorBlocks" onclick="color(this)"></div>
            <div id="orange" style="background: orange;" class="colorBlocks" onclick="color(this)"></div>
            <div id="black" style="background: black;" class="colorBlocks" onclick="color(this)"></div>
            <div id="white" class="Eraser" onclick="color(this)">Eraser</div>
        </div>
        <img id="canvasimg" style="display:none;">
        <br/>
        <input type="button" value="save" id="btn" size="30" onclick="save()">
        <input type="button" value="clear" id="clr" size="23" onclick="erase()">
    </div>
</body>



<script type="text/javascript">
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var x = "black",
        y = 2;

    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;

        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);
    }

    function color(obj) {
        switch (obj.id) {
            case "green":
                x = "green";
                break;
            case "blue":
                x = "blue";
                break;
            case "red":
                x = "red";
                break;
            case "yellow":
                x = "yellow";
                break;
            case "orange":
                x = "orange";
                break;
            case "black":
                x = "black";
                break;
            case "white":
                x = "white";
                break;
        }
        if (x == "white") y = 14;
        else y = 2;

    }

    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }

    function erase() {
        var m = confirm("Want to clear");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }

    function save() {
        document.getElementById("canvasimg").style.border = "2px solid";
        var dataURL = canvas.toDataURL();
        document.getElementById("canvasimg").src = dataURL;
        document.getElementById("canvasimg").style.display = "inline";
    }

    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.getBoundingClientRect().left;
            currY = e.clientY - canvas.getBoundingClientRect().top;

            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.getBoundingClientRect().left;;
                currY = e.clientY - canvas.getBoundingClientRect().top;
                draw();
            }
        }
    }
</script>